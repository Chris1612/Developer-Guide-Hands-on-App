[
    {
        "id": "7638acb8.22aadc",
        "type": "tab",
        "label": "Data Collection",
        "disabled": false,
        "info": ""
    },
    {
        "id": "60cf36ed.93f47",
        "type": "tab",
        "label": "KPI-Calc-Dummy",
        "disabled": false,
        "info": ""
    },
    {
        "id": "511729a6.34f92",
        "type": "tab",
        "label": "KPI Estimation",
        "disabled": false,
        "info": ""
    },
    {
        "id": "1ab7e97a.bda1e7",
        "type": "mqtt-broker",
        "name": "Databus",
        "broker": "ie-databus",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": false,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "3e6912e1.eda84e",
        "type": "influxdb",
        "hostname": "influxdb",
        "port": "8086",
        "protocol": "http",
        "database": "edgedb",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x"
    },
    {
        "id": "61b74b3d.7a1df4",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey"
            }
        },
        "site": {
            "name": "IE Flow Creator Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "c13ef546.11918",
        "type": "comment",
        "z": "60cf36ed.93f47",
        "name": "Calculate Total Power Consumption",
        "info": "",
        "x": 800,
        "y": 60,
        "wires": []
    },
    {
        "id": "3e2a9075.cc85e8",
        "type": "function",
        "z": "60cf36ed.93f47",
        "name": "Query-List",
        "func": "var a ='\"name\"'\nmsg.query=\"select * from powerdrive1 where \"+a+\"='powerdrive1'\"\nreturn msg; \n/*\nCLI-Funktionen f?r die Influxdb (Auszug)\n\"select * from data1\"\n//Zeigt alle Daten im measuurement an\nSELECT * FROM data where time > '2018-08-09T08:20:39.96Z' and time <= now()\n//Anzeige der measuremebts in einem bestimmten Zeitraum\nselect * from data where value > 80 and value < 85 \n//Filterung der Daten nach Value \n*/",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 270,
        "y": 160,
        "wires": [
            [
                "bfed62.b1c252a"
            ]
        ]
    },
    {
        "id": "571fd37f.b09044",
        "type": "function",
        "z": "60cf36ed.93f47",
        "name": "Query-List",
        "func": "var a ='\"name\"'\nmsg.query=\"select * from powerdrive2 where \"+a+\"='powerdrive2'\"\nreturn msg; \n\n\n/*\nCLI-Funktionen f?r die Influxdb (Auszug)\n\"select * from data1\"\n//Zeigt alle Daten im measuurement an\nSELECT * FROM data where time > '2018-08-09T08:20:39.96Z' and time <= now()\n//Anzeige der measuremebts in einem bestimmten Zeitraum\nselect * from data where value > 80 and value < 85 \n//Filterung der Daten nach Value \n*/\n",
        "outputs": 1,
        "noerr": 0,
        "x": 270,
        "y": 220,
        "wires": [
            [
                "5c4e2e60.65594"
            ]
        ]
    },
    {
        "id": "5c4e2e60.65594",
        "type": "influxdb in",
        "z": "60cf36ed.93f47",
        "influxdb": "3e6912e1.eda84e",
        "name": "influxdb_query_power2",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "x": 490,
        "y": 220,
        "wires": [
            [
                "c5968f3d.ea3b4"
            ]
        ]
    },
    {
        "id": "c5968f3d.ea3b4",
        "type": "function",
        "z": "60cf36ed.93f47",
        "name": "collect_last_power_values",
        "func": "context.data = context.data || {};\n\nswitch (msg.payload[msg.payload.length-1].name) \n{\n    case \"powerdrive1\":\n        context.data.power1 = msg.payload[msg.payload.length-1].value;\n        msg = null;\n        break;\n    case \"powerdrive2\":\n        context.data.power2= msg.payload[msg.payload.length-1].value;\n        msg = null;\n        break;\n    default:\n        msg = null;\n    \tbreak;\n}\n\nif(context.data.power1 !== null && context.data.power2 !== null) \n{\n\tmsg2 = {};\n    msg2 = context.data;\n\n    context.data=null;\n\treturn msg2;\n} \nelse\n{\n    \n    return msg;    \n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 770,
        "y": 220,
        "wires": [
            [
                "24affb84.44fa5c",
                "ab58be1c.08a2b8"
            ]
        ]
    },
    {
        "id": "b92bcbc7.5c10f8",
        "type": "function",
        "z": "60cf36ed.93f47",
        "name": "join_and_write_power_Influxdb",
        "func": "total = msg.payload;\n\n\n    Beta = [{\n        measurement: \"GEN_KPI_TotalPower\",\n        fields:{\n            name: \"TotalPower\",\n            value:total,\n            //weitereTags: -100 //(optional) nur 4 Datatypes sind in der Influxdb akzeptiert: Int,Float,String, Bool\n        },\n        timestamp: new Date()\n    }]\n//    Arr.push(Beta);\n//}\n\nmsg.payload = Beta;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1270,
        "y": 220,
        "wires": [
            [
                "8dec34cb.25a998",
                "d4446b81.f92b1"
            ]
        ]
    },
    {
        "id": "d4446b81.f92b1",
        "type": "influxdb batch",
        "z": "60cf36ed.93f47",
        "influxdb": "3e6912e1.eda84e",
        "precision": "",
        "retentionPolicy": "",
        "name": "influxdb_write",
        "x": 1520,
        "y": 180,
        "wires": []
    },
    {
        "id": "bfed62.b1c252a",
        "type": "influxdb in",
        "z": "60cf36ed.93f47",
        "influxdb": "3e6912e1.eda84e",
        "name": "influxdb_query_power1",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "x": 490,
        "y": 160,
        "wires": [
            [
                "c5968f3d.ea3b4"
            ]
        ]
    },
    {
        "id": "6e9eafac.0c1a68",
        "type": "comment",
        "z": "7638acb8.22aadc",
        "name": "### Generate dummy data  and storage in influxdb ###",
        "info": "",
        "x": 280,
        "y": 80,
        "wires": []
    },
    {
        "id": "9d25ec07.2aa0a8",
        "type": "link in",
        "z": "60cf36ed.93f47",
        "name": "",
        "links": [
            "3e5dc939.97a5b6",
            "e4232e6c.dd7cc"
        ],
        "x": 135,
        "y": 220,
        "wires": [
            [
                "3e2a9075.cc85e8",
                "571fd37f.b09044"
            ]
        ]
    },
    {
        "id": "24affb84.44fa5c",
        "type": "function",
        "z": "60cf36ed.93f47",
        "name": "sum_total_power",
        "func": "var arr = [];\nvar mean=0;\nvar sum=0;\n\narr = Object.keys(msg).map(function(key) {\n    return msg[key]\n    })\narr.splice(-1,1)\n\nfor(var i=0; i < arr.length ; i++){\n      sum = sum + arr[i];\n}\n// mean = sum / arr.length; \n\nmsg2 = new Object();\n//msg2.payload = (arr[0] + arr[1] + arr[2]) / arr.length; \n\nmsg2.payload = sum;\nreturn msg2;",
        "outputs": 1,
        "noerr": 0,
        "x": 1010,
        "y": 220,
        "wires": [
            [
                "b92bcbc7.5c10f8"
            ]
        ]
    },
    {
        "id": "8dec34cb.25a998",
        "type": "debug",
        "z": "60cf36ed.93f47",
        "name": "KPI-Power",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 1510,
        "y": 260,
        "wires": []
    },
    {
        "id": "ab58be1c.08a2b8",
        "type": "debug",
        "z": "60cf36ed.93f47",
        "name": "Last Power Values",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1010,
        "y": 160,
        "wires": []
    },
    {
        "id": "8527e0f5.b02a28",
        "type": "influxdb in",
        "z": "511729a6.34f92",
        "influxdb": "3e6912e1.eda84e",
        "name": "query",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "x": 850,
        "y": 160,
        "wires": [
            [
                "1dfebc89.85e15b"
            ]
        ]
    },
    {
        "id": "cb314a0a.4d9f6",
        "type": "debug",
        "z": "511729a6.34f92",
        "name": "count",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 610,
        "y": 120,
        "wires": []
    },
    {
        "id": "d05a57b1.12dc48",
        "type": "link in",
        "z": "511729a6.34f92",
        "name": "input_raw_data",
        "links": [
            "e4232e6c.dd7cc"
        ],
        "x": 55,
        "y": 160,
        "wires": [
            [
                "e9201d3b.ba5ff"
            ]
        ]
    },
    {
        "id": "9a890f5f.ecc498",
        "type": "influxdb in",
        "z": "511729a6.34f92",
        "influxdb": "3e6912e1.eda84e",
        "name": "query",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "x": 450,
        "y": 160,
        "wires": [
            [
                "cb314a0a.4d9f6",
                "9f4c58e9.63ff78"
            ]
        ]
    },
    {
        "id": "a85336e3.f7a74",
        "type": "function",
        "z": "511729a6.34f92",
        "name": "COUNT",
        "func": "msgQueryCount = {}\nmsgQueryCount.measurement = msg.payload[0].measurement\nmsgQueryCount.query = 'SELECT COUNT(\"value\") FROM ' + msg.payload[0].measurement\n\nreturn msgQueryCount;",
        "outputs": 1,
        "noerr": 0,
        "x": 300,
        "y": 160,
        "wires": [
            [
                "9a890f5f.ecc498"
            ]
        ]
    },
    {
        "id": "9f4c58e9.63ff78",
        "type": "function",
        "z": "511729a6.34f92",
        "name": "GET_LAST_ENTRIES",
        "func": "msgQueryGet = {}\nmsgQueryGet.measurement = msg.measurement\nif (msg.payload[0].count >= 50) {\n    msgQueryGet.query = 'SELECT * FROM ' + msg.measurement + ' ORDER BY time DESC limit 50'\n\n    return msgQueryGet;\n}\n\nelse {return }\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 660,
        "y": 160,
        "wires": [
            [
                "8527e0f5.b02a28"
            ]
        ]
    },
    {
        "id": "4769c128.7d8e2",
        "type": "comment",
        "z": "511729a6.34f92",
        "name": "### check if measurement has enough entries and get last 5 values if true",
        "info": "",
        "x": 320,
        "y": 20,
        "wires": []
    },
    {
        "id": "1dfebc89.85e15b",
        "type": "json",
        "z": "511729a6.34f92",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 990,
        "y": 160,
        "wires": [
            [
                "3dd1f321.fa48a4",
                "cc608b2.1dfc078"
            ]
        ]
    },
    {
        "id": "3dd1f321.fa48a4",
        "type": "debug",
        "z": "511729a6.34f92",
        "name": "response_get",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1220,
        "y": 220,
        "wires": []
    },
    {
        "id": "565d5635.68175",
        "type": "comment",
        "z": "511729a6.34f92",
        "name": "PowerDrive1 and PowerDrive2 last 50 entries",
        "info": "",
        "x": 210,
        "y": 80,
        "wires": []
    },
    {
        "id": "c85c5baf.61b0d8",
        "type": "influxdb in",
        "z": "511729a6.34f92",
        "influxdb": "3e6912e1.eda84e",
        "name": "query",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "x": 830,
        "y": 400,
        "wires": [
            [
                "c0de12a9.db4f78"
            ]
        ]
    },
    {
        "id": "c638eb6a.e6b81",
        "type": "debug",
        "z": "511729a6.34f92",
        "name": "mqtt output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1340,
        "y": 460,
        "wires": []
    },
    {
        "id": "1743d08d.b7f897",
        "type": "influxdb in",
        "z": "511729a6.34f92",
        "influxdb": "3e6912e1.eda84e",
        "name": "query",
        "query": "SELECT COUNT(\"value\") FROM voltagedrive3",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "x": 370,
        "y": 400,
        "wires": [
            [
                "8df3f9b7.a2f298"
            ]
        ]
    },
    {
        "id": "8df3f9b7.a2f298",
        "type": "function",
        "z": "511729a6.34f92",
        "name": "GET_LAST_ENTRIES",
        "func": "// gets the value of n, if not yet set takes default value 50\nvar n = context.get('sample_n')|| 50;\n\n\n    \n    msgQueryGet = {}\n    //msgQueryGet.measurement = msg.measurement\n    msgQueryGet.measurement = 'voltagedrive3'\n    if (msg.payload[0].count >= n) {\n        msgQueryGet.SampleNumber = n\n        msgQueryGet.query = 'SELECT \"value\" FROM voltagedrive3 ORDER BY time DESC limit ' + n\n        //msgQueryGet.query = 'SELECT \"value\" FROM ' + msg.measurement + ' limit ' + n\n        return msgQueryGet;\n    }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 600,
        "y": 400,
        "wires": [
            [
                "c85c5baf.61b0d8"
            ]
        ]
    },
    {
        "id": "3c7af9e5.a70da6",
        "type": "mqtt out",
        "z": "511729a6.34f92",
        "name": "Mean",
        "topic": "Mean",
        "qos": "",
        "retain": "",
        "broker": "1ab7e97a.bda1e7",
        "x": 1320,
        "y": 500,
        "wires": []
    },
    {
        "id": "c9eb3e99.3ae23",
        "type": "comment",
        "z": "511729a6.34f92",
        "name": "VoltageDrive3 dynamic sample of entries",
        "info": "",
        "x": 490,
        "y": 360,
        "wires": []
    },
    {
        "id": "7f548da3.3e3a14",
        "type": "influxdb in",
        "z": "511729a6.34f92",
        "influxdb": "3e6912e1.eda84e",
        "name": "query",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "x": 810,
        "y": 600,
        "wires": [
            [
                "c0de12a9.db4f78"
            ]
        ]
    },
    {
        "id": "692cd118.a53d6",
        "type": "influxdb in",
        "z": "511729a6.34f92",
        "influxdb": "3e6912e1.eda84e",
        "name": "query",
        "query": "SELECT COUNT(\"value\") FROM currentdrive3",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "x": 370,
        "y": 600,
        "wires": [
            [
                "57f45d9e.b15984"
            ]
        ]
    },
    {
        "id": "57f45d9e.b15984",
        "type": "function",
        "z": "511729a6.34f92",
        "name": "GET_LAST_ENTRIES",
        "func": "\n\n// gets the value of n, if not yet set takes default value 50\nvar n = context.get('sample_n')|| 50;\n\n\n    \n    msgQueryGet = {}\n    //msgQueryGet.measurement = msg.measurement\n    msgQueryGet.measurement = 'currentdrive3'\n    if (msg.payload[0].count >= n) {\n        msgQueryGet.SampleNumber = n\n        msgQueryGet.query = 'SELECT \"value\" FROM currentdrive3 ORDER BY time DESC limit ' + n\n        //msgQueryGet.query = 'SELECT \"value\" FROM ' + msg.measurement + ' limit ' + n\n        return msgQueryGet;\n    }\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 600,
        "y": 600,
        "wires": [
            [
                "7f548da3.3e3a14"
            ]
        ]
    },
    {
        "id": "71b3309c.5940c",
        "type": "comment",
        "z": "511729a6.34f92",
        "name": "CurrentDrive3  dynamic sample of entries",
        "info": "",
        "x": 490,
        "y": 640,
        "wires": []
    },
    {
        "id": "e9201d3b.ba5ff",
        "type": "switch",
        "z": "511729a6.34f92",
        "name": "filter",
        "property": "payload[0].measurement",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "powerdrive1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "powerdrive2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "voltagedrive3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "currentdrive3",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 150,
        "y": 160,
        "wires": [
            [
                "a85336e3.f7a74"
            ],
            [
                "a85336e3.f7a74"
            ],
            [
                "1743d08d.b7f897"
            ],
            [
                "692cd118.a53d6"
            ]
        ]
    },
    {
        "id": "c0de12a9.db4f78",
        "type": "function",
        "z": "511729a6.34f92",
        "name": "manual_join",
        "func": "var tempo_cd3_batch = context.get('cd3_batch')||[];\nvar tempo_vd3_batch = context.get('vd3_batch')||[];\n\nfunction build_analytics_object(){\n    data_obj = {\n        sample_number : msg.SampleNumber,\n        current_drive3_batch : tempo_cd3_batch,\n        voltage_drive3_batch : tempo_vd3_batch,\n    }\n    return data_obj\n}\n\n\nif (msg.measurement == 'currentdrive3'){\n    tempo_cd3_batch = msg.payload\n    context.set('cd3_batch',tempo_cd3_batch)\n    \n}\nelse if (msg.measurement == 'voltagedrive3') {\n    tempo_vd3_batch = msg.payload\n    context.set('vd3_batch',tempo_vd3_batch)\n}\n\nif (tempo_cd3_batch.length > 0 && tempo_vd3_batch.length >0 ) {\n    py_obj={}\n    py_obj.payload = build_analytics_object()\n    tempo_cd3_batch = []\n    tempo_vd3_batch = []\n    context.set('cd3_batch', tempo_cd3_batch)\n    context.set('vd3_batch', tempo_vd3_batch)\n    \n    return py_obj\n    \n}\n\nelse{\n    return\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1100,
        "y": 500,
        "wires": [
            [
                "c638eb6a.e6b81",
                "3c7af9e5.a70da6"
            ]
        ]
    },
    {
        "id": "b0e30298.6df628",
        "type": "mqtt in",
        "z": "511729a6.34f92",
        "name": "",
        "topic": "StandardKpiResult",
        "qos": "2",
        "datatype": "auto",
        "broker": "1ab7e97a.bda1e7",
        "x": 130,
        "y": 820,
        "wires": [
            [
                "9d72ce69.38157",
                "d2dff493.f656a"
            ]
        ]
    },
    {
        "id": "83d6ee1e.aade4",
        "type": "debug",
        "z": "511729a6.34f92",
        "name": "response standard kpis",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1230,
        "y": 780,
        "wires": []
    },
    {
        "id": "9d72ce69.38157",
        "type": "json",
        "z": "511729a6.34f92",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 510,
        "y": 820,
        "wires": [
            [
                "85a636d.94bf8c8"
            ]
        ]
    },
    {
        "id": "85a636d.94bf8c8",
        "type": "function",
        "z": "511729a6.34f92",
        "name": "store data",
        "func": "my_payload = {};\nmy_payload = msg.payload;\noutput_standardkpis = {}\noutput_standardkpis.measurement = my_payload.name.toUpperCase() + '_STANDARD_KPIS'\noutput_standardkpis.payload = {\n    mean: Math.round(my_payload.mean_result * 1e2)/ 1e2,\n    median: Math.round(my_payload.median_result * 1e2)/ 1e2,\n    stddev: Math.round(my_payload.stddev_result * 1e2)/ 1e2,\n    name: my_payload.name,\n}\n\nreturn output_standardkpis;",
        "outputs": 1,
        "noerr": 0,
        "x": 870,
        "y": 820,
        "wires": [
            [
                "36394427.2660dc",
                "83d6ee1e.aade4"
            ]
        ]
    },
    {
        "id": "36394427.2660dc",
        "type": "influxdb out",
        "z": "511729a6.34f92",
        "influxdb": "3e6912e1.eda84e",
        "name": "write_influxdb",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "x": 1200,
        "y": 820,
        "wires": []
    },
    {
        "id": "1931d36b.7787f5",
        "type": "mqtt in",
        "z": "511729a6.34f92",
        "name": "",
        "topic": "MeanResult",
        "qos": "2",
        "datatype": "auto",
        "broker": "1ab7e97a.bda1e7",
        "x": 110,
        "y": 960,
        "wires": [
            [
                "54b1ee12.a7d67",
                "180f0c66.8385c4"
            ]
        ]
    },
    {
        "id": "d7b9f5f7.bb2b58",
        "type": "debug",
        "z": "511729a6.34f92",
        "name": "response mean",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1210,
        "y": 920,
        "wires": []
    },
    {
        "id": "54b1ee12.a7d67",
        "type": "json",
        "z": "511729a6.34f92",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 510,
        "y": 960,
        "wires": [
            [
                "77b98c3d.f2fa04"
            ]
        ]
    },
    {
        "id": "77b98c3d.f2fa04",
        "type": "function",
        "z": "511729a6.34f92",
        "name": "store data",
        "func": "my_payload = {};\nmy_payload = msg.payload;\noutput_pd1_mean = {}\noutput_pd1_mean.measurement = my_payload.name.toUpperCase()\noutput_pd1_mean.payload = {\n    value: Math.round(my_payload.power_mean_result * 1e2)/ 1e2,\n    name: my_payload.name,\n}\n\nreturn output_pd1_mean;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 870,
        "y": 960,
        "wires": [
            [
                "e9dba505.3553b8",
                "d7b9f5f7.bb2b58"
            ]
        ]
    },
    {
        "id": "e9dba505.3553b8",
        "type": "influxdb out",
        "z": "511729a6.34f92",
        "influxdb": "3e6912e1.eda84e",
        "name": "write_influxdb",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "x": 1200,
        "y": 960,
        "wires": []
    },
    {
        "id": "5325fa40.f3a9ec",
        "type": "comment",
        "z": "511729a6.34f92",
        "name": "Data Analytics Results",
        "info": "",
        "x": 540,
        "y": 740,
        "wires": []
    },
    {
        "id": "ebccbf6a.aaf6c8",
        "type": "inject",
        "z": "7638acb8.22aadc",
        "name": "n-samples",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "samples_number_n",
        "payload": "20",
        "payloadType": "num",
        "x": 170,
        "y": 240,
        "wires": [
            [
                "772a0b64.3e3b9c",
                "da0fa720.aa29c",
                "33afed1b.773baa",
                "b77b8a4c.64995"
            ]
        ]
    },
    {
        "id": "b77b8a4c.64995",
        "type": "function",
        "z": "7638acb8.22aadc",
        "name": "Write_KPI_PowerDrive1_Influxdb",
        "func": "if (msg!==null)\n{\nmean = msg.payload;\n    Beta = [{\n\n        measurement: \"powerdrive1\",\n        fields:{\n            name: \"powerdrive1\",\n            value:(Math.random() * (999.0 - 750.0 + 1) + 750.0),\n            qualitycode: false\n            //weitereTags: -100 //(optional) nur 4 Datatypes sind in der Influxdb akzeptiert: Int,Float,String, Bool\n        },\n        timestamp: new Date()\n    }]\n//    Arr.push(Beta);\n//}\n\nmsg.payload = Beta;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 460,
        "y": 160,
        "wires": [
            [
                "7ae15071.cf494",
                "476071b3.be487",
                "e4232e6c.dd7cc"
            ]
        ]
    },
    {
        "id": "772a0b64.3e3b9c",
        "type": "function",
        "z": "7638acb8.22aadc",
        "name": "Write_KPI_PowerDrive2_Influxdb",
        "func": "if (msg!==null)\n{\nmean = msg.payload;\n    Beta = [{\n//values between 800 and 999 Watt\n        measurement: \"powerdrive2\",\n        fields:{\n            name: \"powerdrive2\",\n            value:(Math.random() * (999.0 - 800.0 + 1) + 800.0),\n            qualitycode: false\n            //weitereTags: -100 //(optional) nur 4 Datatypes sind in der Influxdb akzeptiert: Int,Float,String, Bool\n        },\n        timestamp: new Date()\n    }]\n//    Arr.push(Beta);\n//}\n\nmsg.payload = Beta;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 460,
        "y": 220,
        "wires": [
            [
                "4d4f850c.84bd7c",
                "476071b3.be487",
                "e4232e6c.dd7cc"
            ]
        ]
    },
    {
        "id": "da0fa720.aa29c",
        "type": "function",
        "z": "7638acb8.22aadc",
        "name": "Write_KPI_VoltageDrive3_Influxdb",
        "func": "if (msg!==null)\n{\nmean = msg.payload;\n    Beta = [{\n//values between 48 and 50 Volt\n        measurement: \"voltagedrive3\",\n        fields:{\n            name: \"voltagedrive3\",\n            value:(Math.random() * (50.0 - 48.0) + 48.0),\n            qualitycode: false\n            \n        },\n        ttimestamp: new Date()\n    }]\n//    Arr.push(Beta);\n//}\n\nmsg.payload = Beta;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 460,
        "y": 280,
        "wires": [
            [
                "476071b3.be487",
                "9ca9259a.126728",
                "e4232e6c.dd7cc"
            ]
        ]
    },
    {
        "id": "33afed1b.773baa",
        "type": "function",
        "z": "7638acb8.22aadc",
        "name": "Write_KPI_CurrentDrive3_Influxdb",
        "func": "if (msg!==null)\n{\nmean = msg.payload;\n    Beta = [{\n//values between 18 and 20 Ampere\n        measurement: \"currentdrive3\",\n        fields:{\n            name: \"currentdrive3\",\n            value:(Math.random() * (20.0 - 18.0) + 18.0),\n            qualitycode: false\n            \n        },\n        timestamp: new Date()\n    }]\n//    Arr.push(Beta);\n//}\n\nmsg.payload = Beta;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 460,
        "y": 340,
        "wires": [
            [
                "476071b3.be487",
                "c4718612.c92268",
                "e4232e6c.dd7cc"
            ]
        ]
    },
    {
        "id": "476071b3.be487",
        "type": "influxdb batch",
        "z": "7638acb8.22aadc",
        "influxdb": "3e6912e1.eda84e",
        "precision": "",
        "retentionPolicy": "",
        "name": "write_data_influxdb",
        "x": 910,
        "y": 240,
        "wires": []
    },
    {
        "id": "e4232e6c.dd7cc",
        "type": "link out",
        "z": "7638acb8.22aadc",
        "name": "data_gen",
        "links": [
            "d05a57b1.12dc48",
            "9d25ec07.2aa0a8"
        ],
        "x": 835,
        "y": 400,
        "wires": []
    },
    {
        "id": "7ae15071.cf494",
        "type": "debug",
        "z": "7638acb8.22aadc",
        "name": "KPI-Result_PowerDrive1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 930,
        "y": 160,
        "wires": []
    },
    {
        "id": "4d4f850c.84bd7c",
        "type": "debug",
        "z": "7638acb8.22aadc",
        "name": "KPI-Result_PowerDrive2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 930,
        "y": 200,
        "wires": []
    },
    {
        "id": "9ca9259a.126728",
        "type": "debug",
        "z": "7638acb8.22aadc",
        "name": "KPI-Result_VoltageDrive3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 300,
        "wires": []
    },
    {
        "id": "c4718612.c92268",
        "type": "debug",
        "z": "7638acb8.22aadc",
        "name": "KPI-Result_CurrentDrive3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 340,
        "wires": []
    },
    {
        "id": "d2dff493.f656a",
        "type": "debug",
        "z": "511729a6.34f92",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 780,
        "wires": []
    },
    {
        "id": "180f0c66.8385c4",
        "type": "debug",
        "z": "511729a6.34f92",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 380,
        "y": 920,
        "wires": []
    },
    {
        "id": "cc608b2.1dfc078",
        "type": "mqtt out",
        "z": "511729a6.34f92",
        "name": "StandardKpis",
        "topic": "StandardKpis",
        "qos": "",
        "retain": "",
        "broker": "1ab7e97a.bda1e7",
        "x": 1220,
        "y": 160,
        "wires": []
    }
]